<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="generator" content="Docutils 0.19: https://docutils.sourceforge.io/" />

    <title>10. Session Support &amp; Memory Variables</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    <link rel="stylesheet" type="text/css" href="../_static/css-style.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="session-support-memory-variables">
<span id="session-support-and-memory-variables"></span><span id="index-0"></span><h1><span class="section-number">10. </span>Session Support &amp; Memory Variables</h1>
<section id="session-support">
<span id="index-1"></span><h2><span class="section-number">10.1. </span>Session Support</h2>
<p>We have already seen that the connection socket can be closed during the interaction. Either to be renew for the <strong>external connector</strong>, or
the third party, depending on the scenario (client or server mode). This introduces a challenge that is the capability of recognising the
interaction session once the socket is renewed, and not considering it as a new interaction.</p>
<p>So as to do that, <em>Lope</em> has some mechanisms to have session support. In the <code class="docutils literal notranslate"><span class="pre">operation</span></code> section, there si a subsection not explained so far that is
<code class="docutils literal notranslate"><span class="pre">session</span></code>. In server mode,  this adds a session ID for each connection once it is created, and used later on to recognise the connection / interaction session.
This is done via checking this ID for each request before executing any rule. The session information is expected to have a key-value structure, where the symbol
to separate the key and the value can be configured, as well as what is the ending character of the session information (it can be empty).</p>
<p>Therefore, if the structure is something like this <code class="docutils literal notranslate"><span class="pre">KEY+KEY_VALUE_SEPARATOR+{session_value}+END_VALUE</span></code></p>
<dl class="simple">
<dt>In this example <code class="docutils literal notranslate"><span class="pre">jsession:srfksdhbq234r;</span></code> we can identify the different parts of the structure:</dt><dd><ul class="simple">
<li><p><code class="docutils literal notranslate"><span class="pre">KEY</span></code> = <code class="docutils literal notranslate"><span class="pre">jsession</span></code></p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">KEY_VALUE_SEPARATOR</span></code> = <code class="docutils literal notranslate"><span class="pre">:</span></code></p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">session_value</span></code> = <code class="docutils literal notranslate"><span class="pre">srfksdhbq234r</span></code></p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">END_VALUE</span></code> = <code class="docutils literal notranslate"><span class="pre">;</span></code></p></li>
</ul>
</dd>
</dl>
<p>In server mode, the <code class="docutils literal notranslate"><span class="pre">session_value</span></code> can be In client mode, identifying the session can autogenerated using different options. You can add the session key (<code class="docutils literal notranslate"><span class="pre">KEY</span></code>) and
the session value (<code class="docutils literal notranslate"><span class="pre">session_value</span></code>) by using the reserved words <code class="docutils literal notranslate"><span class="pre">{{SESSION_KEY}}</span></code> and <code class="docutils literal notranslate"><span class="pre">{{SESSION_VALUE}}</span></code> in the <code class="docutils literal notranslate"><span class="pre">response</span></code> or <code class="docutils literal notranslate"><span class="pre">value</span></code> field in any rule (curvy brackets included).
The following is how the session support configuration can be configured:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="c1"># -----------------------------------------------------------</span>
<span class="c1"># Operational parameters of the interation</span>
<span class="c1"># and connection with third parties</span>
<span class="c1"># -----------------------------------------------------------</span>
<span class="n">operation</span><span class="p">:</span>

    <span class="c1"># GENERAL ASPECTS</span>
    <span class="c1"># ===============</span>
    <span class="o">...</span>


    <span class="c1"># TO ENABLE TLS/DTLS USE</span>
    <span class="c1"># ======================</span>
    <span class="o">...</span>


    <span class="c1"># SOCKET CONNECTION CLOSE</span>
    <span class="c1"># =======================</span>
    <span class="o">...</span>

    <span class="c1"># SESSION SUPPORT</span>
    <span class="c1"># ===============</span>
    <span class="n">session</span><span class="p">:</span>
        <span class="c1"># To use or not the session support</span>
        <span class="n">enable</span><span class="p">:</span> <span class="n">no</span> <span class="c1"># yes/no(default)</span>

        <span class="c1"># session key</span>
        <span class="n">key</span><span class="p">:</span> <span class="nb">id</span>

        <span class="n">key_value_separator</span><span class="p">:</span> <span class="s2">&quot;:&quot;</span>

        <span class="c1"># character after the session value (if not present,</span>
        <span class="c1"># it will try to limit the session value via a &#39;space&#39;</span>
        <span class="c1"># character, &#39;brake line&#39; character, or &#39;end&#39; character)</span>
        <span class="n">end_value</span><span class="p">:</span> <span class="s2">&quot;,&quot;</span>

        <span class="c1">#  for server mode</span>
        <span class="n">autogenerated</span><span class="p">:</span>

            <span class="n">enable</span><span class="p">:</span> <span class="n">yes</span> <span class="c1"># yes(default)/no</span>

            <span class="n">number_characters</span><span class="p">:</span> <span class="mi">20</span> <span class="c1"># default 12</span>

            <span class="c1"># One of the following: &quot;numbers&quot;, &quot;hex_lower&quot;, &quot;hex_upper&quot;,</span>
            <span class="c1"># &quot;hex_mix&quot;, &quot;alphanumeric_upper&quot;, &quot;alphanumeric_lower&quot;(default),</span>
            <span class="c1"># &quot;alphanumeric_mix&quot;, &quot;alphanumeric_and_symbols_upper&quot;,</span>
            <span class="c1"># &quot;alphanumeric_and_symbols_lower&quot;, &quot;alphanumeric_and_symbols_mix&quot;</span>
            <span class="n">characters_type</span><span class="p">:</span> <span class="n">alphanumeric_lower</span>

        <span class="c1"># Session ID can be updated via conversation rules</span>
        <span class="n">update</span><span class="p">:</span>

            <span class="c1"># is it possible to change the session ID during the interaction?</span>
            <span class="n">enable</span><span class="p">:</span> <span class="n">yes</span> <span class="c1"># yes/no(default)</span>

            <span class="c1"># One of the following:</span>
            <span class="c1"># &quot;rule_detected&quot;, &quot;rule_executed(default)&quot;</span>
            <span class="n">when</span><span class="p">:</span> <span class="n">rule_executed</span>

    <span class="c1"># OTHER TOPICS</span>
    <span class="c1"># ============</span>
    <span class="c1"># Additional aspects should be defined here, but</span>
    <span class="c1"># they will be described in the respective sections</span>
    <span class="c1"># of this documentation, for the sake of clarity</span>
    <span class="o">...</span>
</pre></div>
</div>
<p>As you can see, the session values can be changed via custom rules. This can be at the time of ‘rule detection’
(when the rule is analysed as applicable), or after its execution (‘rule execution’). This can be done by adding the following fields:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">any_custom_rule</span><span class="p">:</span>

    <span class="c1"># GENERAL FIELDS</span>
    <span class="c1"># ==============</span>
    <span class="o">...</span>

    <span class="c1"># SESSION UPDATE FIELDS</span>
    <span class="c1"># =====================</span>
    <span class="c1"># If several rules are applicable, they are overwritten.</span>
    <span class="c1"># The last one is the one that remains</span>
    <span class="c1"># (usually, the one with the larger ID)</span>
    <span class="n">session_update</span><span class="p">:</span>
        <span class="c1"># allow that this rule can do the session update</span>
        <span class="n">enable</span><span class="p">:</span> <span class="n">yes</span> <span class="c1"># yes/no (default)</span>

        <span class="c1"># Several options available. In case several of them,</span>
        <span class="c1"># the preference orderis the following:</span>
        <span class="c1">#1-memory variable, 2-autogenerated value, 3-fixed value</span>

        <span class="c1"># OPTIONS:</span>

        <span class="c1"># 1 - Using memory variable, the content of the</span>
        <span class="c1">#  memory variable (they are explained below in this chapter)</span>
        <span class="n">memory_variable</span><span class="p">:</span> <span class="n">var1</span>

        <span class="c1"># OR</span>

        <span class="c1"># 2 - Create a new session ID using the configuration</span>
        <span class="c1"># of the &#39;operation&#39; section</span>
        <span class="c1"># only used when &#39;memory_variable&#39; is empty or not used</span>
        <span class="n">autogenerated_value</span><span class="p">:</span> <span class="n">yes</span> <span class="c1"># yes/no (default)</span>

        <span class="c1"># OR</span>

        <span class="c1"># 3 - Fixed value (hardcoded value)</span>
        <span class="c1"># only used when &#39;memory_variable&#39; is empty or not used,</span>
        <span class="c1"># and &#39;autogenerated_value&#39; is &#39;no&#39; or not used</span>
        <span class="n">fixed_value</span><span class="p">:</span> <span class="p">[</span><span class="nb">any</span> <span class="n">value</span> <span class="n">you</span> <span class="n">wish</span><span class="p">]</span>


    <span class="c1"># OTHER FIELDS</span>
    <span class="c1"># ============</span>
    <span class="c1"># Other fields expalined in this documentation</span>
    <span class="o">...</span>
</pre></div>
</div>
</section>
<section id="memory-variables">
<span id="index-2"></span><h2><span class="section-number">10.2. </span>Memory Variables</h2>
<p>We have already seen the session support, and this could be considered as an example
of a memory variables (<code class="docutils literal notranslate"><span class="pre">SESSION_KEY</span></code> and <code class="docutils literal notranslate"><span class="pre">SESSION_VALUE</span></code>). These variables ar the way to save some data and have
‘memory’ about the interaction. The variables must be declared in the <em>conversation rules</em> file and they are typed,
so they shuold be used always in the same way (if it is an <code class="docutils literal notranslate"><span class="pre">int</span></code>, then do not use it as a <code class="docutils literal notranslate"><span class="pre">string</span></code>).</p>
<dl class="simple">
<dt>There are different scopes for this variables:</dt><dd><ul class="simple">
<li><p><strong>Connection (Interaction) Level</strong>: These variables ‘live’ in the context of a connection or interaction, they
are only accesible and usable in the context of a specific connection with a third party. Every time a new connection
is established, a new set of the these memory varibales are provided for that connection or interaction.</p></li>
<li><p><strong>Global Level</strong>: The variables of this memory level are shared among different connections within one <strong>external connector</strong>,
and they are created at the beginning of the execution. They are accesible and usable for any connection that happens with the
third parties that are interacting with that <strong>external connector</strong>.</p></li>
<li><p><strong>Multi External Connector Level</strong>: These variables are located in the redis server, and they are shared among all the
<strong>external connectors</strong>. This kind of memory is the ‘execution’ memory level of <em>Lope</em> and it is created for the first
<strong>external conenctor</strong> that is executed.</p></li>
</ul>
</dd>
</dl>
<p>The use of multi external connector memory variables is not enable by default, and you can do it using by ‘enabling’ the field
<code class="docutils literal notranslate"><span class="pre">memory_variables_multi_ext_connector_enable</span></code> in the <code class="docutils literal notranslate"><span class="pre">operation</span></code> section. Just remember that you also have to configure the connection
between the <strong>external connection</strong> and the Redis server, as explaind in <a class="reference internal" href="ext-conn_conf.xhtml#external-connector-configuration"><span class="std std-ref">External Connector Configuration</span></a>.</p>
<p>Additionally, since several <strong>external connectors</strong>  may try to initialize the same memory variable in the same execution, we need to put
some control there. This can be carried out using the field <code class="docutils literal notranslate"><span class="pre">multi_ext_connector_memory_overwrite_during_init</span></code> under the <code class="docutils literal notranslate"><span class="pre">operation</span></code> section.
This allows us to mark if a new <strong>external connector</strong> should overwrite the exisisting variable in Redis at the initialization phase, or not.
By default, any new execution checks if the memory variable already exists in Redis, and if not, the <strong>external connector</strong> creates it. If it exist,
it depends on the value of that field in <code class="docutils literal notranslate"><span class="pre">operation</span></code> to overwrite it or not.</p>
<p>The following diagram represents the different kind of memories that can contain the memory variables, according to their scope:</p>
<img alt="../_images/memory_variables.png" class="align-center" src="../_images/memory_variables.png" style="width: 1000px;" />
<p id="index-3">They can be used in any response for any rule, by puting the variable name under double curvy brackets: <code class="docutils literal notranslate"><span class="pre">{{variable_name}}</span></code>,
and used in many different operations as explained in this page. However, they should be defined previously before being used.
In the definition, they can be initialized as well. The initialization can be either using a fixed value or autogenerated value.</p>
<p>In case of several memory variable names have the same name, the one with the reduced scope is the one used at the time of being used.
Therefore, the preference order is: connection level &gt; global level &gt; milti external connector level. The declaration of the memory variables
is done in the <code class="docutils literal notranslate"><span class="pre">memory</span></code> section (same level than <code class="docutils literal notranslate"><span class="pre">operation</span></code>). The supported types are <code class="docutils literal notranslate"><span class="pre">int</span></code>, <code class="docutils literal notranslate"><span class="pre">float</span></code>, <code class="docutils literal notranslate"><span class="pre">string</span></code>, <code class="docutils literal notranslate"><span class="pre">bool</span></code>;
where the <code class="docutils literal notranslate"><span class="pre">string</span></code> one is the default one used if the type is not declared. The following example shows how the declaration of memory variables
is done using fixed values.</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="c1"># -----------------------------------------------------------</span>
<span class="c1"># Operational parameters of the interation</span>
<span class="c1"># and connection with third parties</span>
<span class="c1"># -----------------------------------------------------------</span>
<span class="n">operation</span><span class="p">:</span>

    <span class="c1"># GENERAL ASPECTS</span>
    <span class="c1"># ===============</span>
    <span class="o">...</span>

    <span class="c1"># TO ENABLE TLS/DTLS USE</span>
    <span class="c1"># ======================</span>
    <span class="o">...</span>

    <span class="c1"># SOCKET CONNECTION CLOSE</span>
    <span class="c1"># =======================</span>
    <span class="o">...</span>

    <span class="c1"># SESSION SUPPORT</span>
    <span class="c1"># ===============</span>
    <span class="o">...</span>

    <span class="c1"># MEMORY VARIABLES</span>
    <span class="c1"># ================</span>
    <span class="c1"># To enable the use of Redis server to share memory</span>
    <span class="c1"># variables between external connectors</span>
    <span class="n">memory_variables_multi_ext_connector_enable</span><span class="p">:</span> <span class="n">yes</span> <span class="c1"># yes/no(default)</span>

    <span class="c1"># To overwrite exisisting memory variables in Redis</span>
    <span class="c1"># during the initialization phase</span>
    <span class="n">multi_ext_connector_memory_overwrite_during_init</span><span class="p">:</span> <span class="n">yes</span> <span class="c1"># yes/no(default)</span>

    <span class="c1"># OTHER TOPICS</span>
    <span class="c1"># ============</span>
    <span class="c1"># Additional aspects should be defined here, but</span>
    <span class="c1"># they will be described in the respective sections</span>
    <span class="c1"># of this documentation, for the sake of clarity</span>
    <span class="o">...</span>

<span class="c1"># -----------------------------------------------------------</span>
<span class="c1"># Execution memory</span>
<span class="c1"># -----------------------------------------------------------</span>
<span class="c1"># list of memory variables to be used in the simulation</span>
<span class="n">memory_variables</span><span class="p">:</span>

  <span class="n">multi_extconn_level</span><span class="p">:</span>
    <span class="o">-</span> <span class="n">name</span><span class="p">:</span> <span class="n">var1</span>
      <span class="n">default_value</span><span class="p">:</span> <span class="mi">0</span>
      <span class="nb">type</span><span class="p">:</span> <span class="nb">int</span>

    <span class="o">-</span> <span class="n">name</span><span class="p">:</span> <span class="n">var2</span>
      <span class="n">default_value</span><span class="p">:</span> <span class="kc">False</span>
      <span class="nb">type</span><span class="p">:</span> <span class="nb">bool</span>

  <span class="n">global_level</span><span class="p">:</span>
    <span class="o">-</span> <span class="n">name</span><span class="p">:</span> <span class="n">var3</span>
      <span class="n">default_value</span><span class="p">:</span> <span class="mf">2.71</span>
      <span class="nb">type</span><span class="p">:</span> <span class="nb">float</span>

    <span class="o">-</span> <span class="n">name</span><span class="p">:</span> <span class="n">var4</span>
      <span class="n">default_value</span><span class="p">:</span> <span class="kc">False</span>
      <span class="nb">type</span><span class="p">:</span> <span class="nb">bool</span>

  <span class="n">connection_level</span><span class="p">:</span>
  <span class="o">-</span> <span class="n">name</span><span class="p">:</span> <span class="n">var5</span>
    <span class="n">default_value</span><span class="p">:</span> <span class="mi">14</span><span class="n">qwefa234rt</span>
    <span class="nb">type</span><span class="p">:</span> <span class="n">string</span>

  <span class="o">-</span> <span class="n">name</span><span class="p">:</span> <span class="n">var6</span>
    <span class="n">default_value</span><span class="p">:</span> <span class="n">I</span> <span class="n">am</span> <span class="n">a</span> <span class="n">string</span> <span class="p">:)</span>
</pre></div>
</div>
<p>And this another example shows how to define memory variables using autogenerated values at the connection level,
but it works in the same way for any other memory level:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="c1"># -----------------------------------------------------------</span>
<span class="c1"># Operational parameters of the interation</span>
<span class="c1"># and connection with third parties</span>
<span class="c1"># -----------------------------------------------------------</span>
<span class="n">operation</span><span class="p">:</span>

    <span class="c1"># GENERAL ASPECTS</span>
    <span class="c1"># ===============</span>
    <span class="o">...</span>

    <span class="c1"># TO ENABLE TLS/DTLS USE</span>
    <span class="c1"># ======================</span>
    <span class="o">...</span>

    <span class="c1"># SOCKET CONNECTION CLOSE</span>
    <span class="c1"># =======================</span>
    <span class="o">...</span>

    <span class="c1"># SESSION SUPPORT</span>
    <span class="c1"># ===============</span>
    <span class="o">...</span>

    <span class="c1"># MEMORY VARIABLES</span>
    <span class="c1"># ================</span>
    <span class="c1"># To enable the use of Redis server to share memory</span>
    <span class="c1"># variables between external connectors</span>
    <span class="n">memory_variables_multi_ext_connector_enable</span><span class="p">:</span> <span class="n">yes</span> <span class="c1"># yes/no(default)</span>

    <span class="c1"># To overwrite exisisting memory variables in Redis</span>
    <span class="c1"># during the initialization phase</span>
    <span class="n">multi_ext_connector_memory_overwrite_during_init</span><span class="p">:</span> <span class="n">yes</span> <span class="c1"># yes/no(default)</span>

    <span class="c1"># OTHER TOPICS</span>
    <span class="c1"># ============</span>
    <span class="c1"># Additional aspects should be defined here, but</span>
    <span class="c1"># they will be described in the respective sections</span>
    <span class="c1"># of this documentation, for the sake of clarity</span>
    <span class="o">...</span>

<span class="c1"># -----------------------------------------------------------</span>
<span class="c1"># Execution memory</span>
<span class="c1"># -----------------------------------------------------------</span>
<span class="c1"># list of memory variables to be used in the simulation</span>
<span class="n">memory_variables</span><span class="p">:</span>

  <span class="n">connection_level</span><span class="p">:</span>

    <span class="c1"># String autogenerated memory variable</span>
    <span class="o">-</span> <span class="n">name</span><span class="p">:</span> <span class="n">random_string__token</span>
      <span class="nb">type</span><span class="p">:</span> <span class="n">string</span>

      <span class="n">autogenerated</span><span class="p">:</span>
        <span class="n">enable</span><span class="p">:</span> <span class="n">yes</span> <span class="c1"># yes/no(default)</span>

        <span class="n">number_characters</span><span class="p">:</span> <span class="mi">6</span> <span class="c1"># default 12</span>

        <span class="c1"># One of the following: &quot;numbers&quot;, &quot;hex_lower&quot;,</span>
        <span class="c1"># &quot;hex_upper&quot;, &quot;hex_mix&quot;, &quot;alphanumeric_upper&quot;,</span>
        <span class="c1"># &quot;alphanumeric_lower&quot;(default), &quot;alphanumeric_mix&quot;,</span>
        <span class="c1"># &quot;alphanumeric_and_symbols_upper&quot;,</span>
        <span class="c1"># &quot;alphanumeric_and_symbols_lower&quot;,</span>
        <span class="c1"># &quot;alphanumeric_and_symbols_mix&quot;</span>
        <span class="n">characters_type</span><span class="p">:</span> <span class="n">alphanumeric_mix</span>

    <span class="c1"># Float autogenerated memory variable</span>
    <span class="o">-</span> <span class="n">name</span><span class="p">:</span> <span class="n">random_float</span>
      <span class="nb">type</span><span class="p">:</span> <span class="nb">float</span>

      <span class="n">autogenerated</span><span class="p">:</span>
        <span class="n">enable</span><span class="p">:</span> <span class="n">yes</span> <span class="c1"># yes/no(default)</span>

        <span class="n">min_limit_interval</span><span class="p">:</span> <span class="mi">0</span>
        <span class="n">max_limit_interval</span><span class="p">:</span> <span class="mi">1</span>

    <span class="c1"># Int autogenerated memory variable</span>
    <span class="o">-</span> <span class="n">name</span><span class="p">:</span> <span class="n">random_int</span>
      <span class="nb">type</span><span class="p">:</span> <span class="nb">int</span>

      <span class="n">autogenerated</span><span class="p">:</span>
        <span class="n">enable</span><span class="p">:</span> <span class="n">yes</span> <span class="c1"># yes/no(default)</span>

        <span class="n">min_limit_interval</span><span class="p">:</span> <span class="mi">0</span>
        <span class="n">max_limit_interval</span><span class="p">:</span> <span class="mi">100</span>

    <span class="c1"># Bool autogenerated memory variable</span>
    <span class="o">-</span> <span class="n">name</span><span class="p">:</span> <span class="n">random_bool</span>
      <span class="nb">type</span><span class="p">:</span> <span class="nb">bool</span>

      <span class="n">autogenerated</span><span class="p">:</span>
        <span class="n">enable</span><span class="p">:</span> <span class="n">yes</span> <span class="c1"># yes/no(default)</span>
</pre></div>
</div>
<dl class="simple">
<dt>If no value is provided in the definition, then the default values are:</dt><dd><ul class="simple">
<li><p>‘0’ for <code class="docutils literal notranslate"><span class="pre">float</span></code> and <code class="docutils literal notranslate"><span class="pre">int</span></code> types</p></li>
<li><p>‘false’ for <code class="docutils literal notranslate"><span class="pre">boolean</span></code> types</p></li>
<li><p>an empty string for <code class="docutils literal notranslate"><span class="pre">string</span></code> types</p></li>
</ul>
</dd>
</dl>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="footer">
        &copy;2022, Sec Lope De Vega Project.
        
        |
        <a href="../_sources/content/session_and_memory.rst.txt"
            rel="nofollow">Page source</a>
    </div>
  </body>
</html>