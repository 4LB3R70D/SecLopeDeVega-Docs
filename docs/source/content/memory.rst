.. index:: Memory Variables & Operations

.. _memory_variables_&_operations:

Memory Variables & Operations
=============================
We have already seen the session support in :ref:`conversation_rules`, and this could be considered as an example
of a memory variables (``SESSION_KEY`` and ``SESSION_VALUE``). These variables ar the way to save some data and have 
'memory' about the interaction. The variables must be declared in the *conversation rules* file and they are typed, 
so they shuold be used always in the same way (if it is an ``int``, then do not use it as a ``string``). 

There are different scopes for this variables:

  * **Connection (Interaction) Level**: These variables 'live' in the context of a connection or interaction, they 
    are only accesible and usable in the context of a specific connection with a third party. Every time a new connection
    is established, a new set of the these memory varibales are provided for that connection or interaction.

  * **Global Level**: The variables of this memory level are shared among different connections within one **external connector**,
    and they are created at the beginning of the execution. They are accesible and usable for any connection that happens with the 
    third parties that are interacting with that **external connector**. 

  * **Multi External Connector Level**: These variables are located in the redis server, and they are shared among all the 
    **external connectors**. This kind of memory is the 'execution' memory level of *Lope* and it is created for the first
    **external conenctor** that is executed. Since several of them can try to initialize the same variable, there is a field under the 
    ``operation`` section called ``multi_ext_connector_memory_overwrite_during_init`` to mark if a new **external conenctor**
    must overwrite the exisisting variable in Redis at the initialization phase, or not. By default

The following diagram represents the different kind of memories that can contain the memory variables, according to their scope:

.. image:: ../_static/memory_variables.png
   :width: 1000
   :align: center

.. index:: Memory Variables

Memory Variables
----------------
They can be used in any response for any rule, by puting the variable name under double curvy brackets: ``{{variable_name}}``, 
and used in many different operations as explained in this page. However, they should be defined previously before being used.
In the definition, they can be initialized as well. The initialization can be either using a fixed value or autogenerated value.

In case of several memory variable names have the same name, the one with the reduced scope is the one used at the time of being used.
Therefore, the preference order is: connection level > global level > milti external connector level. The declaration of the memory variables 
is done in the ``memory`` section (same level than ``operation``). The supported types are ``int``, ``float``, ``string``, ``bool``; 
where the ``string`` one is the default one used if the type is not declared. The following example shows how the declaration of memory variables
is done using fixed values.

.. code-block:: 

    # -----------------------------------------------------------
    # Operational parameters of the interation 
    # and connection with third parties
    # -----------------------------------------------------------
    operation:

        # GENERAL ASPECTS
        # ===============
        ...

        # TO ENABLE TLS/DTLS USE
        # ======================
        ...

        # SOCKET CONNECTION CLOSE
        # =======================
        ...

        # SESSION SUPPORT
        # ===============
        ...

        # MEMORY VARIABLES
        # ================
        # To overwrite exisisting memory variables in Redis during the initialization phase
        multi_ext_connector_memory_overwrite_during_init: yes # yes/no(default). 

        # OTHER TOPICS
        # ============
        # Additional aspects should be defined here, but 
        # they will be described in the respective sections
        # of this documentation, for the sake of clarity
        ...

  # -----------------------------------------------------------
  # Execution memory
  # -----------------------------------------------------------
  # list of memory variables to be used in the simulation
  memory_variables:

    multi_extconn_level: 
      - name: var1
        default_value: 0
        type: int

      - name: var2
        default_value: False
        type: bool

    global_level: 
      - name: var3
        default_value: 2.71
        type: float

      - name: var4
        default_value: False
        type: bool

    connection_level: 
    - name: var5
      default_value: 14qwefa234rt
      type: string

    - name: var6
      default_value: helloo

And this another example shows how to define memory variables using autogenerated values at the connection level,
but it works in the same way for any other memory level:

.. code-block:: 

      # -----------------------------------------------------------
    # Operational parameters of the interation 
    # and connection with third parties
    # -----------------------------------------------------------
    operation:

        # GENERAL ASPECTS
        # ===============
        ...

        # TO ENABLE TLS/DTLS USE
        # ======================
        ...

        # SOCKET CONNECTION CLOSE
        # =======================
        ...

        # SESSION SUPPORT
        # ===============
        ...

        # MEMORY VARIABLES
        # ================
        # To overwrite exisisting memory variables in Redis during the initialization phase
        multi_ext_connector_memory_overwrite_during_init: yes # yes/no(default). 

        # OTHER TOPICS
        # ============
        # Additional aspects should be defined here, but 
        # they will be described in the respective sections
        # of this documentation, for the sake of clarity
        ...

  # -----------------------------------------------------------
  # Execution memory
  # -----------------------------------------------------------
  # list of memory variables to be used in the simulation
  memory_variables:

    connection_level: 

      # String autogenerated memory variable
      - name: random_string__token
        type: string

        autogenerated: 
          enable: yes # yes/no(default)

          number_characters: 6 # default 12

          # One of the following: "numbers", "hex_lower",
          # "hex_upper", "hex_mix", "alphanumeric_upper", 
          # "alphanumeric_lower"(default), "alphanumeric_mix",
          # "alphanumeric_and_symbols_upper", 
          # "alphanumeric_and_symbols_lower", 
          # "alphanumeric_and_symbols_mix"
          characters_type: alphanumeric_mix

      # Float autogenerated memory variable
      - name: random_float
        type: float

        autogenerated: 
          enable: yes # yes/no(default)

          min_limit_interval: 0
          max_limit_interval: 1

      # Int autogenerated memory variable
      - name: random_int
        type: int

        autogenerated: 
          enable: yes # yes/no(default)

          min_limit_interval: 0
          max_limit_interval: 100

      # Bool autogenerated memory variable
      - name: random_bool
        type: bool

        autogenerated: 
          enable: yes # yes/no(default)


.. index:: Capturing Data using Memory Variables

Capturing Data using Memory Variables
-------------------------------------



.. index:: Built-in Functions

Built-in Functions
------------------



.. index:: Custom Functions

Custom Functions
----------------